// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int length, next, base; // accessor
    static Array heap, memory;
    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heap = 2048;

        let length = 0; // accessor
        let next = 1;   // accessor
        let base = 2;   // accessor
        
        let heap[next] = null;
        let heap[length] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // smallest possible segments
        // fragmenting the heap(linked-list)
        var Array currNode, prevNode, nextBlock;
        let currNode = heap;
        let prevNode = null;
        // first-fit or best-fit
        // fit if segment.size >= size+2
        // repeat if not fit (i.e.: segment.size < size+2)
        while(currNode[length] < size+2){
            let prevNode = currNode;
            let currNode = currNode[next];
            if(currNode = null){
                return -1;
            }
        }

        let nextBlock = currNode + size + base;
        let nextBlock[next] = null;
        let nextBlock[length] = currNode[length] - size - base;

        let currNode[next] = null;
        let currNode[length] = size;

        if(prevNode = null){
            let heap = nextBlock;
        }else{
            let prevNode[next] = nextBlock;
        }
        return currNode + base;
        
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object){
        // push to the heap(linked-list)
        var Array block;
        let block = object - base;
        let block[next] = heap;
        let heap = block;
        return;
    }    
}
