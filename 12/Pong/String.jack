// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLen;
    field int len;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;
        let len = 0;
        if(maxLen > 0){
            let str = Array.new(maxLen);
        }else{
            let str = null;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(maxLen = 0){
            return;
        }
        let maxLen = 0;
        let len = 0;
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(~(j < 0) & (j < len)){
            return str[j];
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(~(j < 0) & (j < len)){
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(len < maxLen){
            let str[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(len > 0){
            let str[len] = 0;
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int idx, val;
        var boolean is_neg;
        let idx = 0;
        let val = 0;
        if(str[idx] = String.minus()){
            let is_neg = true;
            let idx = idx + 1;
        }
        // '9' = 57; 48 = '0'
        while(idx < len){
            if((str[idx] > 57) | (str[idx] < 48)){
                return val;
            }
            let val = val*10 + str[idx]-48;
            let idx = idx + 1;
        }
        if(is_neg){
            return -val;
        }
        return val;
    }

    method String setIntRecur(int val){
        var int lastDigit, tmp;
        var String chr;
        let tmp = val/10;
        let lastDigit = val - (tmp*10);
        if(val < 10){
            do appendChar(lastDigit + 48);
            return this;
        }else{
            let chr = setIntRecur(tmp);
            return chr.appendChar(lastDigit + 48);
        }
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        do str.dispose();
        let str = Array.new(maxLen);
        if(val < 0){
            do appendChar(String.minus());
            let val = -val;
        }
        do setIntRecur(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function char minus(){
        return 45;
    }
}
