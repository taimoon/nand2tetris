// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
/**
    24575-16384+1 = 8192

*/
class Screen {
    static Array hack_screen_start, hack_screen_end, hack_screen;
    static Array twoExponent;
    static int screen_range;
    static boolean black_pixel, white_pixel, current_color;
    /** Initializes the Screen. */
    function void init() {
        var int word, idx, val;
        
        let hack_screen_start = 16384;
        let hack_screen = hack_screen_start;
        let hack_screen_end = 24575;
        let screen_range = hack_screen_end - hack_screen_start + 1;
        let black_pixel = true;
        let white_pixel = false;
        let current_color = black_pixel;

        let word = 16;
        let twoExponent = Array.new(word);
        let idx = 0;
        let val = 1;
        while(idx < word){
            let twoExponent[idx] = val;
            let val = val + val;
            let idx = idx + 1;
        }
        // do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int scr_idx;
        let  scr_idx = 0;
        while(scr_idx < screen_range){
            let hack_screen[scr_idx] = white_pixel;
            let scr_idx = scr_idx + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let current_color = b;
        return;
    }
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, n_th_bit, value, mask;
        let addr = (32*y) + (x/16);
        let n_th_bit = x & 15; // x % 2^n == x & (2^n - 1) and 2^4 == 16 <-> x%16 <-> x & 15
        let mask = twoExponent[n_th_bit];
        if(current_color){
            let hack_screen[addr] = hack_screen[addr] | mask;
        }else{
            let hack_screen[addr] = hack_screen[addr] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if(y1 = y2){ // horizontal line
            do Screen.draw_horizontal_line(Math.min(x1,x2),Math.max(x1,x2),y1);
            return;
        }
        if(x1 = x2){ // vertical line
            do Screen.draw_vertical_line(x1, Math.min(y1,y2), Math.max(y1,y2));
            return;
        }
        do Screen.draw_slope_line(x1,y1,x2,y2);
        return;
    }
    function void draw_horizontal_line(int x1, int x2, int y){
        // assuming x1 < x2
        while(~(x1 > x2)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }
        return;
    }
    function void draw_vertical_line(int x, int y1, int y2){
        // assuming y1 < y2
        while(~(y1 > y2)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }
        return;
    }
    function void draw_slope_line(int x1, int y1, int x2, int y2){
        var int dx, dy, a, b, diff;
        if(x1 > x2){ // ensure x1 < x2
            do Screen.draw_slope_line(x2, y2, x1 ,y1);
            return;
        }
        // x1 < x2
        let dx = x2 - x1;
        let dy = y2 - y1; 
        let a = 0;
        let b = 0;
        let diff = 0;
        if(y1 < y2){
            while(~(a > dx) & ~(b > dy)){
                do Screen.drawPixel(x1+a, y1+b);
                if(diff > 0){
                    let a = a + 1;
                    let diff = diff - dy;
                }else{
                    let b = b + 1;
                    let diff = diff + dx;
                }
            }
        }else{
            while(~(a > dx) & ~(b < dy)){
                do Screen.drawPixel(x1+a, y1+b);
                if(diff < 0){
                    let a = a + 1;
                    let diff = diff - dy;
                }else{
                    let b = b - 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)){
            do Screen.drawLine(x1,y1,x2,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, sqr_r;
        if(r > 181){
            return;
        }
        let dy = -r;
        let sqr_r = r*r;
        while(~(dy > r)){
            let dx = Math.sqrt(sqr_r - (dy*dy));
            do Screen.draw_horizontal_line(x-dx, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
    
}
